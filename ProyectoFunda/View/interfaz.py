import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk

from View.uniciclo_processor import create_matrices, UnicicloProcessor


class Ventana:
    def __init__(self, root):
        self.root = root
        self.memoryA,self.memoryB =  create_matrices() #metodo que crea las matrices
        self.uniciclo = None #instancia del uniciclo
        self.selectedP=0 #BANDERA QUE ME INDICA EL PROCESADOR SELECCIONADO.
        self.enableStep=False
        ancho_ventana = 1200  # Ancho de la ventana principal
        alto_ventana = 600  # Alto de la ventana principal
        self.root.geometry(f"{ancho_ventana}x{alto_ventana}")  # Da el tamaño de la ventana
        self.root.resizable(False, False)
        self.setregistros=None

        #self.Img_Uniciclo = Image.open("ProyectoFunda/View/uniciclo.png")
        #self.Img_hazard = Image.open("ProyectoFunda/view/hazards.png")

        #self.Uni_imagen = ImageTk.PhotoImage(self.Img_Uniciclo)
        #self.hazard_imagen = ImageTk.PhotoImage(self.Img_hazard)

        def mostrar_Uniciclo(): #metodo que se llama para mostrar la imagen
            #self.diagram_canva.create_image(300, 200,image=self.Uni_imagen)
            crearUniciclo()
            self.selectedP = 1
            self.enableStep=True
            self.setregistros=self.uniciclo.registers #setea los registros a los del
            #uniciclo
        def mostrar_Uniciclo2():
            crearUniciclo()
            self.selectedP = 2
            self.enableStep = True
            self.setregistros = self.uniciclo.registers  # setea los registros a los del
            # uniciclo
        def pasoApaso():
            if self.selectedP==1:
                if self.selectedP ==1: #si el procesador es el uniciclo
                    self.uniciclo.run_step_by_step()#ejecuta el procesador paso a paso
                    #cambia la interfaz segun la instruccion
                    self.entry4_execInf.delete(0, tk.END)  # Borra el contenido actual del Entry
                    self.entry4_execInf.insert(0, str(self.uniciclo.ipc))  # Inserta el nuevo valor en el Entry
                    self.entry1_execInf.delete(0, tk.END)
                    self.entry1_execInf.insert(0, str(self.uniciclo.cycles))
                    self.entry3_execInf.delete(0, tk.END)
                    self.entry3_execInf.insert(0, str(self.uniciclo.cpi))
                    self.entry2_execInf.delete(0, tk.END)
                    self.entry2_execInf.insert(0, str(self.uniciclo.InsActual))
                    tree.delete(*tree.get_children())
                    for clave, valor in self.setregistros.items():
                        tree.insert("", "end", values=(clave, valor))
            else:
                completo() #ejecución completa.
        def completo():
            self.uniciclo.run_to_completion()
            self.entry4_execInf.delete(0, tk.END)  # Borra el contenido actual del Entry
            self.entry4_execInf.insert(0, str(self.uniciclo.ipc))  # Inserta el nuevo valor en el Entry
            self.entry1_execInf.delete(0, tk.END)
            self.entry1_execInf.insert(0, str(self.uniciclo.cycles))
            self.entry3_execInf.delete(0, tk.END)
            self.entry3_execInf.insert(0, str(self.uniciclo.cpi))
            self.entry2_execInf.delete(0, tk.END)
            self.entry2_execInf.insert(0, str(self.uniciclo.InsActual))
            tree.delete(*tree.get_children())
            for clave, valor in self.setregistros.items():
                tree.insert("", "end", values=(clave, valor))


        def mostrar_hazard():
            self.diagram_canva.create_image(300, 200,image=self.hazard_imagen)
        def crearUniciclo():
            instructions = [
                # Inicializar x1 con 100
                '00000110010000001000000010010011',  # addi x1, x0, 100
                # Dato matrix C[0][0]
                # Load matrix A into registers
                '00000000000000000010000110000011',  # lw x3, 0(x0)  ; Load A[0][0]
                '00000000000100000010001000000011',  # lw x4, 1(x0)  ; Load A[0][1]
                '00000000001000000010001010000011',  # lw x5, 2(x0) ; Load A[0][2]
                '00000000001100000010001100000011',  # lw x6, 3(x0) ; Load A[0][3]
                '00000000010000000010001110000011',  # lw x7, 4(x0) ; Load A[0][4]
                '00000000010100000010010000000011',  # lw x8, 5(x0) ; Load A[0][5]
                '00000000011000000010010010000011',  # lw x9, 6(x0) ; Load A[0][6]
                '00000000011100000010010100000011',  # lw x10, 7(x0) ; Load A[0][7]
                '00000000100000000010010110000011',  # lw x11, 8(x0) ; Load A[0][8]
                '00000000100100000010011000000011',  # lw x12, 9(x0) ; Load A[0][9]

                # Load matrix B into registers
                '00000000000000001010011010000011',  # lw x13, 0(x1)  ; Load B[0][0]
                '00000000101000001010011100000011',  # lw x14, 10(x1)  ; Load B[1][0]
                '00000001010000001010011110000011',  # lw x15, 20(x1)  ; Load B[2][0]
                '00000001111000001010100000000011',  # lw x16, 30(x1)  ; Load B[3][0]
                '00000010100000001010100010000011',  # lw x17, 40(x1)  ; Load B[4][0]
                '00000011001000001010100100000011',  # lw x18, 50(x1)  ; Load B[5][0]
                '00000011110000001010100110000011',  # lw x19, 60(x1)  ; Load B[6][0]
                '00000100011000001010101000000011',  # lw x20, 70(x1)  ; Load B[7][0]
                '00000101000000001010101010000011',  # lw x21, 80(x1)  ; Load B[8][0]
                '00000101101000001010101100000011',  # lw x22, 90(x1)  ; Load B[9][0]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][0]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][0]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010000000100011',  # sw x25, 0(x2)  ; Store x7 in memory[200]

                # Dato matrix C[0][1]
                # Load matrix B into registers (for B[0][1] to B[9][1])
                '00000000000100001010011010000011',  # lw x13, 1(x1)  ; Load B[0][1]
                '00000000101100001010011100000011',  # lw x14, 11(x1)  ; Load B[1][1]
                '00000001010100001010011110000011',  # lw x15, 21(x1)  ; Load B[2][1]
                '00000001111100001010100000000011',  # lw x16, 31(x1)  ; Load B[3][1]
                '00000010100100001010100010000011',  # lw x17, 41(x1)  ; Load B[4][1]
                '00000011001100001010100100000011',  # lw x18, 51(x1)  ; Load B[5][1]
                '00000011110100001010100110000011',  # lw x19, 61(x1)  ; Load B[6][1]
                '00000100011100001010101000000011',  # lw x20, 71(x1)  ; Load B[7][1]
                '00000101000100001010101010000011',  # lw x21, 81(x1)  ; Load B[8][1]
                '00000101101100001010101100000011',  # lw x22, 91(x1)  ; Load B[9][1]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][1]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][1]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010000010100011',  # sw x25, 1(x2)  ; Store x25 in memory[204]

                # Dato matrix C[0][2]
                # Load matrix B into registers (for B[0][2] to B[9][2])
                '00000000001000001010011010000011',  # lw x13, 2(x1)  ; Load B[0][2]
                '00000000110000001010011100000011',  # lw x14, 12(x1)  ; Load B[1][2]
                '00000001011000001010011110000011',  # lw x15, 22(x1)  ; Load B[2][2]
                '00000010000000001010100000000011',  # lw x16, 32(x1)  ; Load B[3][2]
                '00000010101000001010100010000011',  # lw x17, 42(x1)  ; Load B[4][2]
                '00000011010000001010100100000011',  # lw x18, 52(x1)  ; Load B[5][2]
                '00000011111000001010100110000011',  # lw x19, 62(x1)  ; Load B[6][2]
                '00000100100000001010101000000011',  # lw x20, 72(x1)  ; Load B[7][2]
                '00000101001000001010101010000011',  # lw x21, 82(x1)  ; Load B[8][2]
                '00000101110000001010101100000011',  # lw x22, 92(x1)  ; Load B[9][2]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][2]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][2]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][2]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][2]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][2]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][2]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][2]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][2]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][2]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][2]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010000100100011',  # sw x25, 2(x2)  ; Store x25 in memory[208]

                # Dato matrix C[0][3]
                # Load matrix B into registers (for B[0][3] to B[9][3])
                '00000000001100001010011010000011',  # lw x13, 3(x1)  ; Load B[0][3]
                '00000000110100001010011100000011',  # lw x14, 13(x1)  ; Load B[1][3]
                '00000001011100001010011110000011',  # lw x15, 23(x1)  ; Load B[2][3]
                '00000010000100001010100000000011',  # lw x16, 33(x1)  ; Load B[3][3]
                '00000010101100001010100010000011',  # lw x17, 43(x1)  ; Load B[4][3]
                '00000011010100001010100100000011',  # lw x18, 53(x1)  ; Load B[5][3]
                '00000011111100001010100110000011',  # lw x19, 63(x1)  ; Load B[6][3]
                '00000100100100001010101000000011',  # lw x20, 73(x1)  ; Load B[7][3]
                '00000101001100001010101010000011',  # lw x21, 83(x1)  ; Load B[8][3]
                '00000101110100001010101100000011',  # lw x22, 93(x1)  ; Load B[9][3]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][3]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][3]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][3]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][3]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][3]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][3]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][3]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][3]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][3]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][3]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010000110100011',  # sw x25, 3(x2)  ; Store x25 in memory[212]

                # Dato matrix C[0][4]
                # Load matrix B into registers (for B[0][4] to B[9][4])
                '00000000010000001010011010000011',  # lw x13, 4(x1)  ; Load B[0][4]
                '00000000111000001010011100000011',  # lw x14, 14(x1)  ; Load B[1][4]
                '00000001100000001010011110000011',  # lw x15, 24(x1)  ; Load B[2][4]
                '00000010001000001010100000000011',  # lw x16, 34(x1)  ; Load B[3][4]
                '00000010110000001010100010000011',  # lw x17, 44(x1)  ; Load B[4][4]
                '00000011011000001010100100000011',  # lw x18, 54(x1)  ; Load B[5][4]
                '00000100000000001010100110000011',  # lw x19, 64(x1)  ; Load B[6][4]
                '00000100101000001010101000000011',  # lw x20, 74(x1)  ; Load B[7][4]
                '00000101010000001010101010000011',  # lw x21, 84(x1)  ; Load B[8][4]
                '00000101111000001010101100000011',  # lw x22, 94(x1)  ; Load B[9][4]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][4]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][4]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][4]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][4]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][4]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][4]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][4]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][4]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][4]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][4]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010001000100011',  # sw x25, 4(x2)  ; Store x25 in memory[216]

                # Dato matrix C[0][5]
                # Load matrix B into registers (for B[0][5] to B[9][5])
                '00000000010100001010011010000011',  # lw x13, 5(x1)  ; Load B[0][5]
                '00000000111100001010011100000011',  # lw x14, 15(x1)  ; Load B[1][5]
                '00000001100100001010011110000011',  # lw x15, 25(x1)  ; Load B[2][5]
                '00000010001100001010100000000011',  # lw x16, 35(x1)  ; Load B[3][5]
                '00000010110100001010100010000011',  # lw x17, 45(x1)  ; Load B[4][5]
                '00000011011100001010100100000011',  # lw x18, 55(x1)  ; Load B[5][5]
                '00000100000100001010100110000011',  # lw x19, 65(x1)  ; Load B[6][5]
                '00000100101100001010101000000011',  # lw x20, 75(x1)  ; Load B[7][5]
                '00000101010100001010101010000011',  # lw x21, 85(x1)  ; Load B[8][5]
                '00000101111100001010101100000011',  # lw x22, 95(x1)  ; Load B[9][5]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][5]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][5]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][5]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][5]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][5]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][5]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][5]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][5]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][5]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][5]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010001010100011',  # sw x25, 5(x2)  ; Store x25 in memory[220]

                # Dato matrix C[0][6]
                # Load matrix B into registers (for B[0][6] to B[9][6])
                '00000000011000001010011010000011',  # lw x13, 6(x1)  ; Load B[0][6]
                '00000001000000001010011100000011',  # lw x14, 16(x1)  ; Load B[1][6]
                '00000001101000001010011110000011',  # lw x15, 26(x1)  ; Load B[2][6]
                '00000010010000001010100000000011',  # lw x16, 36(x1)  ; Load B[3][6]
                '00000010111000001010100010000011',  # lw x17, 46(x1)  ; Load B[4][6]
                '00000011100000001010100100000011',  # lw x18, 56(x1)  ; Load B[5][6]
                '00000100001000001010100110000011',  # lw x19, 66(x1)  ; Load B[6][6]
                '00000100110000001010101000000011',  # lw x20, 76(x1)  ; Load B[7][6]
                '00000101011000001010101010000011',  # lw x21, 86(x1)  ; Load B[8][6]
                '00000110000000001010101100000011',  # lw x22, 96(x1)  ; Load B[9][6]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][6]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][6]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][6]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][6]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][6]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][6]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][6]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][6]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][6]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][6]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010001100100011',  # sw x25, 6(x2)  ; Store x25 in memory[224]

                # Dato matrix C[0][7]
                # Load matrix B into registers (for B[0][7] to B[9][7])
                '00000000011100001010011010000011',  # lw x13, 7(x1)  ; Load B[0][7]
                '00000001000100001010011100000011',  # lw x14, 17(x1)  ; Load B[1][7]
                '00000001101100001010011110000011',  # lw x15, 27(x1)  ; Load B[2][7]
                '00000010010100001010100000000011',  # lw x16, 37(x1)  ; Load B[3][7]
                '00000010111100001010100010000011',  # lw x17, 47(x1)  ; Load B[4][7]
                '00000011100100001010100100000011',  # lw x18, 57(x1)  ; Load B[5][7]
                '00000100001100001010100110000011',  # lw x19, 67(x1)  ; Load B[6][7]
                '00000100110100001010101000000011',  # lw x20, 77(x1)  ; Load B[7][7]
                '00000101011100001010101010000011',  # lw x21, 87(x1)  ; Load B[8][7]
                '00000110000100001010101100000011',  # lw x22, 97(x1)  ; Load B[9][7]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][7]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][7]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][7]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][7]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][7]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][7]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][7]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][7]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][7]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][7]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010001110100011',  # sw x25, 7(x2)  ; Store x25 in memory[228]

                # Dato matrix C[0][8]
                # Load matrix B into registers (for B[0][8] to B[9][8])
                '00000000100000001010011010000011',  # lw x13, 8(x1)  ; Load B[0][8]
                '00000001001000001010011100000011',  # lw x14, 18(x1)  ; Load B[1][8]
                '00000001110000001010011110000011',  # lw x15, 28(x1)  ; Load B[2][8]
                '00000010011000001010100000000011',  # lw x16, 38(x1)  ; Load B[3][8]
                '00000011000000001010100010000011',  # lw x17, 48(x1)  ; Load B[4][8]
                '00000011101000001010100100000011',  # lw x18, 58(x1)  ; Load B[5][8]
                '00000100010000001010100110000011',  # lw x19, 68(x1)  ; Load B[6][8]
                '00000100111000001010101000000011',  # lw x20, 78(x1)  ; Load B[7][8]
                '00000101100000001010101010000011',  # lw x21, 88(x1)  ; Load B[8][8]
                '00000110001000001010101100000011',  # lw x22, 98(x1)  ; Load B[9][8]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][8]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][8]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][8]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][8]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][8]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][8]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][8]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][8]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][8]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][8]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010010000100011',  # sw x25, 8(x2)  ; Store x25 in memory[232]

                # Dato matrix C[0][9]
                # Load matrix B into registers (for B[0][9] to B[9][9])
                '00000000100100001010011010000011',  # lw x13, 9(x1)  ; Load B[0][9]
                '00000001001100001010011100000011',  # lw x14, 19(x1)  ; Load B[1][9]
                '00000001110100001010011110000011',  # lw x15, 29(x1)  ; Load B[2][9]
                '00000010011100001010100000000011',  # lw x16, 39(x1)  ; Load B[3][9]
                '00000011000100001010100010000011',  # lw x17, 49(x1)  ; Load B[4][9]
                '00000011101100001010100100000011',  # lw x18, 59(x1)  ; Load B[5][9]
                '00000100010100001010100110000011',  # lw x19, 69(x1)  ; Load B[6][9]
                '00000100111100001010101000000011',  # lw x20, 79(x1)  ; Load B[7][9]
                '00000101100100001010101010000011',  # lw x21, 89(x1)  ; Load B[8][9]
                '00000110001100001010101100000011',  # lw x22, 99(x1)  ; Load B[9][9]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][9]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][9]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][9]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][9]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][9]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][9]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][9]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][9]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][9]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][9]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010010010100011',  # sw x25, 9(x2)  ; Store x25 in memory[236]

                # Dato matrix C[1][0]
                # Load matrix A into registers
                '00000001010000000010000110000011',  # lw x3, 10(x0)  ; Load A[1][0]
                '00000001010100000010001000000011',  # lw x4, 11(x0)  ; Load A[1][1]
                '00000001011000000010001010000011',  # lw x5, 12(x0)  ; Load A[1][2]
                '00000001011100000010001100000011',  # lw x6, 13(x0)  ; Load A[1][3]
                '00000001100000000010001110000011',  # lw x7, 14(x0)  ; Load A[1][4]
                '00000001100100000010010000000011',  # lw x8, 15(x0)  ; Load A[1][5]
                '00000001101000000010010010000011',  # lw x9, 16(x0)  ; Load A[1][6]
                '00000001101100000010010100000011',  # lw x10, 17(x0) ; Load A[1][7]
                '00000001110000000010010110000011',  # lw x11, 18(x0) ; Load A[1][8]
                '00000001110100000010011000000011',  # lw x12, 19(x0) ; Load A[1][9]

                # Load matrix B into registers (for B[0][0] to B[9][0])
                '00000000000000001010011010000011',  # lw x13, 0(x1)  ; Load B[0][0]
                '00000000101000001010011100000011',  # lw x14, 10(x1)  ; Load B[1][0]
                '00000001010000001010011110000011',  # lw x15, 20(x1)  ; Load B[2][0]
                '00000001111000001010100000000011',  # lw x16, 30(x1)  ; Load B[3][0]
                '00000010100000001010100010000011',  # lw x17, 40(x1)  ; Load B[4][0]
                '00000011001000001010100100000011',  # lw x18, 50(x1)  ; Load B[5][0]
                '00000011110000001010100110000011',  # lw x19, 60(x1)  ; Load B[6][0]
                '00000100011000001010101000000011',  # lw x20, 70(x1)  ; Load B[7][0]
                '00000101000000001010101010000011',  # lw x21, 80(x1)  ; Load B[8][0]
                '00000101101000001010101100000011',  # lw x22, 90(x1)  ; Load B[9][0]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[1][0] * B[0][0]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[1][1] * B[1][0]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[1][2] * B[2][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[1][3] * B[3][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[1][4] * B[4][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[1][5] * B[5][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[1][6] * B[6][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[1][7] * B[7][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[1][8] * B[8][0]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[1][9] * B[9][0]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010010100100011',  # sw x25, 10(x2)  ; Store x25 in memory[240]

                # Dato matrix C[1][1]
                # Load matrix B into registers (for B[0][1] to B[9][1])
                '00000000000100001010011010000011',  # lw x13, 1(x1)  ; Load B[0][1]
                '00000000101100001010011100000011',  # lw x14, 11(x1)  ; Load B[1][1]
                '00000001010100001010011110000011',  # lw x15, 21(x1)  ; Load B[2][1]
                '00000001111100001010100000000011',  # lw x16, 31(x1)  ; Load B[3][1]
                '00000010100100001010100010000011',  # lw x17, 41(x1)  ; Load B[4][1]
                '00000011001100001010100100000011',  # lw x18, 51(x1)  ; Load B[5][1]
                '00000011110100001010100110000011',  # lw x19, 61(x1)  ; Load B[6][1]
                '00000100011100001010101000000011',  # lw x20, 71(x1)  ; Load B[7][1]
                '00000101000100001010101010000011',  # lw x21, 81(x1)  ; Load B[8][1]
                '00000101101100001010101100000011',  # lw x22, 91(x1)  ; Load B[9][1]

                '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[1][0] * B[0][1]
                '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[1][1] * B[1][1]
                '00000011100010111000110010110011',  # add x25, x23, x24 ;
                '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[1][2] * B[2][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[1][3] * B[3][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[1][4] * B[4][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[1][5] * B[5][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[1][6] * B[6][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[1][7] * B[7][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[1][8] * B[8][1]
                '00000011011111001000110100110011',  # add x26, x25, x23 ;
                '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[1][9] * B[9][1]
                '00000011011111010000110010110011',  # add x25, x26, x23 ;
                '00000001100100010010010110100011',  # sw x25, 11(x2)  ; Store x25 in memory[244]

                '00000000000000000000000000001111'  # End program
            ]
            self.uniciclo = UnicicloProcessor(instructions, self.memoryA, self.memoryB)
            print("se crea el uniciclo con exito")


        self.barra_menu = tk.Menu()

        self.Tipo = tk.Menu(self.barra_menu, tearoff=False)

        self.Uniciclo = tk.Menu(self.barra_menu, tearoff=False)
        self.Uniciclo.add_command(command=mostrar_Uniciclo, label="Paso a Paso")
        #self.Uniciclo.add_command(command=)
        self.Uniciclo.add_command(command=mostrar_Uniciclo2, label="Ejecución completa")



        self.barra_menu.add_cascade(menu=self.Tipo, label="Tipo de procesador")
        self.Tipo.add_cascade(menu=self.Uniciclo, label="Uniciclo")
        self.Tipo.add_cascade(menu=self.Uniciclo, label="Multiciclo")
        self.Tipo.add_cascade(menu=self.Uniciclo, label="Segmentado con riesgos y solucionando con stalls.")
        self.Tipo.add_cascade(menu=self.Uniciclo, label="Segmentado con unidad de riesgos y adelantamiento.")

        self.root.config(menu=self.barra_menu)

#Espacio de avanzar o pausar
        self.boton_retoceda = tk.Button(root, text='«', font=("Arial", 20))
        self.boton_retoceda.place(x=40, y=5)
        self.boton_avance = tk.Button(root, text='»', font=("Arial", 20), command=pasoApaso)
        self.boton_avance.place(x=80, y=5)
        self.boton_pausa = tk.Button(root, text='⏸', font=("Arial", 20))
        self.boton_pausa.place(x=120, y=5)
        self.boton_reversa = tk.Button(root, text='🔁', font=("Arial", 20))
        self.boton_reversa.place(x=180, y=5)

#Espacio para el diagrama o modelado
        self.outer_diagram_frame = tk.Frame(root, highlightbackground="gray", highlightthickness=1)
        self.outer_diagram_frame.place(x=20, y=65)

        self.diagram_canva = tk.Canvas(self.outer_diagram_frame, background="white", width=780, height=380)
        self.diagram_canva.pack(side=tk.TOP, fill=tk.Y)

        #self.y_scrollbar = tk.Scrollbar(self.outer_diagram_frame, orient=tk.VERTICAL, command=self.diagram_canva.yview)
        #self.y_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.x_scrollbar = tk.Scrollbar(self.outer_diagram_frame, orient=tk.HORIZONTAL, command=self.diagram_canva.xview)
        self.x_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

        self.diagram_canva.configure(xscrollcommand=self.x_scrollbar.set)

        self.diagram_canva.config(scrollregion=self.diagram_canva.bbox("all"))

#Espacio para Registers

        # Crear un Frame para contener el Treeview y las Scrollbars
        self.frame = tk.Frame(root)
        self.frame.place(x=850, y=30)

        # Crear las Scrollbars
        vsb = ttk.Scrollbar(self.frame, orient="vertical")
        vsb.pack(side='right', fill='y')
        hsb = ttk.Scrollbar(self.frame, orient="horizontal")
        hsb.pack(side='bottom', fill='x')

        # Crear el Treeview
        tree = ttk.Treeview(self.frame, columns=("col1", "col2"), show='headings', yscrollcommand=vsb.set,
                            xscrollcommand=hsb.set)
        tree.pack(fill='both', expand=True)

        # Configurar las Scrollbars
        vsb.config(command=tree.yview)
        hsb.config(command=tree.xview)

        # Definir los encabezados de las columnas
        tree.heading("col1", text="Registro")
        tree.heading("col2", text="Valor")


        # Definir el tamaño de las columnas
        tree.column("col1", width=100)
        tree.column("col2", width=190)


        # Insertar 32 filas de datos en el Treeview
        #esto esta en el metodo steb by step

        self.label_register = tk.Label(root, text="Registers", font=("Arial", 9))
        self.label_register.place(x=860, y=5)

        #Espacio para informacion de ejecucion
        self.canvas_execute_inf = tk.Canvas(root, width=330, height=200, highlightbackground="black", highlightthickness=1)
        self.canvas_execute_inf.place(x=850, y=300)
        self.label_executeInf = tk.Label(root, text="Execution info", font=("Arial", 9))
        self.label_executeInf.place(x=860, y=290)

        self.entry1_execInf = tk.Entry(self.canvas_execute_inf,width=30, font=("Arial", 9))
        self.entry1_execInf.place(x=100, y=10)
        self.label_execInf1 = tk.Label(self.canvas_execute_inf, text="Cycles:", font=("Arial", 9))
        self.label_execInf1.place(x=20, y=10)

        self.entry2_execInf = tk.Entry(self.canvas_execute_inf, width=30, font=("Arial", 9))
        self.entry2_execInf.place(x=100, y=50)
        self.label_execInf2 = tk.Label(self.canvas_execute_inf, text="Instrucc Actual", font=("Arial", 9))
        self.label_execInf2.place(x=20, y=50)

        self.entry3_execInf = tk.Entry(self.canvas_execute_inf, width=30, font=("Arial", 9))
        self.entry3_execInf.place(x=100, y=90)
        self.label_execInf3 = tk.Label(self.canvas_execute_inf, text="CPI:", font=("Arial", 9))
        self.label_execInf3.place(x=20, y=90)

        self.entry4_execInf = tk.Entry(self.canvas_execute_inf, width=30, font=("Arial", 9))
        self.entry4_execInf.place(x=100, y=130)
        self.label_execInf4 = tk.Label(self.canvas_execute_inf, text="IPC:", font=("Arial", 9))
        self.label_execInf4.place(x=20, y=130)

        self.entry5_execInf = tk.Entry(self.canvas_execute_inf, width=30, font=("Arial", 9))
        self.entry5_execInf.place(x=100, y=170)
        self.label_execInf5 = tk.Label(self.canvas_execute_inf, text="Clock rate:", font=("Arial", 9))
        self.label_execInf5.place(x=20, y=170)




if __name__ == "__main__":
    VentaPri = tk.Tk()
    VentaPri.title("Ripes")
    app = Ventana(VentaPri)
    VentaPri.mainloop()