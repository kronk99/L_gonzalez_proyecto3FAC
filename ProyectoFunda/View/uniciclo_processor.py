# uniciclo_processor.py

import time  # Importa el módulo time para manejar retardos
from instruction_encodeU import encode  # Importa la función encode del módulo instruction_encode


def create_matrices():
    # Crea dos matrices (A y B) como listas planas de números
    matrix_A = [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
    ]
    
    matrix_B = [
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200
    ]
    
    return matrix_A, matrix_B  # Retorna las matrices A y B

class UnicicloProcessor:
    def __init__(self, instructions, memory_A, memory_B):
        self.instructions = instructions
        self.PC = 0
        self.cycles = 0
        self.registers = {f'x{i}': 0 for i in range(32)}
        self.memory = [0] * 2048  # Memoria de datos, expandida para acomodar más datos
        self.instruction_memory = instructions
        self.labels = self.parse_labels(instructions)
        self.initialize_memory(memory_A, memory_B)

    def initialize_memory(self, memory_A, memory_B):
        # Inicializar memoria con matrix_A en la dirección 0
        for i in range(len(memory_A)):
            self.memory[i] = memory_A[i]

        # Inicializar memoria con matrix_B en la dirección 100
        for i in range(len(memory_B)):
            self.memory[100 + i] = memory_B[i]

        # Inicializar x2 para apuntar a la base de la memoria de resultados (dirección 200)
        self.registers['x2'] = 200
    
    def parse_labels(self, instructions):
        labels = {}
        for i, instruction in enumerate(instructions):
            if ':' in instruction:
                label, instr = instruction.split(':')
                labels[label.strip()] = i * 4
        return labels

    def fetch(self):
        instruction = self.instruction_memory[self.PC // 4]
        self.PC += 4
        return instruction

    def decode(self, instruction):
        print(f"Decoding instruction: {instruction}")
        return instruction

    def execute(self, binary_instr):
        opcode = binary_instr[-7:]
        rd = int(binary_instr[-12:-7], 2)
        f3 = binary_instr[-15:-12]
        rs1 = int(binary_instr[-20:-15], 2)
        rs2 = int(binary_instr[-25:-20], 2)
        f7 = binary_instr[:-25]
        
        if opcode == '0110011':  # Tipo R
            if f3 == '000' and f7 == '0000001':  # add
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] + self.registers[f'x{rs2}']
                print(f"Executed ADD: x{rd} = {self.registers[f'x{rd}']}")
            elif f3 == '000' and f7 == '0100000':  # sub
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] - self.registers[f'x{rs2}']
                print(f"Executed SUB: x{rd} = {self.registers[f'x{rd}']}")
            elif f3 == '000' and f7 == '0000000':  # mul
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] * self.registers[f'x{rs2}']
                print(f"Executed MUL: x{rd} = {self.registers[f'x{rd}']} (x{rs1}={self.registers[f'x{rs1}']} * x{rs2}={self.registers[f'x{rs2}']})")
            elif f3 == '010':  # slt
                self.registers[f'x{rd}'] = 1 if self.registers[f'x{rs1}'] < self.registers[f'x{rs2}'] else 0
                print(f"Executed SLT: x{rd} = {self.registers[f'x{rd}']}")
            elif f3 == '110':  # or
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] | self.registers[f'x{rs2}']
                print(f"Executed OR: x{rd} = {self.registers[f'x{rd}']}")
            elif f3 == '111':  # and
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] & self.registers[f'x{rs2}']
                print(f"Executed AND: x{rd} = {self.registers[f'x{rd}']}")

        elif opcode == '0010011':  # Tipo I
            imm = int(binary_instr[:-20], 2)
            if f3 == '000':  # addi
                self.registers[f'x{rd}'] = self.registers[f'x{rs1}'] + imm
                print(f"Executed ADDI: x{rd} = {self.registers[f'x{rd}']}")

        elif opcode == '0000011':  # Tipo I - lw
            imm = int(binary_instr[:-20], 2)
            address = self.registers[f'x{rs1}'] + imm
            self.registers[f'x{rd}'] = self.memory[address]
            print(f"Executed LW: x{rd} = Memory[{address}] = {self.registers[f'x{rd}']}")

        elif opcode == '0100011':  # Tipo S - sw
            imm_upper = binary_instr[:7]
            imm_lower = binary_instr[-12:-7]
            imm = int(imm_upper + imm_lower, 2)
            address = self.registers[f'x{rs1}'] + imm
            print(f"SW Debug: imm_upper = {imm_upper}, imm_lower = {imm_lower}, imm = {imm}, address = {address}, rs2 = {self.registers[f'x{rs2}']}")
            self.memory[address] = self.registers[f'x{rs2}']
            print(f"Executed SW: Memory[{address}] = x{rs2} ({self.registers[f'x{rs2}']})")

        elif opcode == '1100011':  # Tipo B
            imm = int(binary_instr[0] + binary_instr[-8:-7] + binary_instr[1:7] + binary_instr[-12:-8] + '0', 2)
            if f3 == '000':  # beq
                if self.registers[f'x{rs1}'] == self.registers[f'x{rs2}']:
                    self.PC += imm - 4
                print(f"Executed BEQ: PC = {self.PC}")
            elif f3 == '001':  # bne
                if self.registers[f'x{rs1}'] != self.registers[f'x{rs2}']:
                    self.PC += imm - 4
                print(f"Executed BNE: PC = {self.PC}")

        elif opcode == '1101111':  # Tipo J - jal
            imm = int(binary_instr[0] + binary_instr[12:20] + binary_instr[11] + binary_instr[1:11] + '0', 2)
            self.registers[f'x{rd}'] = self.PC + 4
            self.PC += imm - 4
            print(f"Executed JAL: PC = {self.PC}, x{rd} = {self.registers[f'x{rd}']}")

        elif opcode == '1100111':  # Tipo I - jalr
            imm = int(binary_instr[:-20], 2)
            temp = self.PC + 4
            self.PC = (self.registers[f'x{rs1}'] + imm) & ~1
            self.registers[f'x{rd}'] = temp
            print(f"Executed JALR: PC = {self.PC}, x{rd} = {self.registers[f'x{rd}']}")

    def run_step_by_step(self):
        while self.PC < len(self.instructions) * 4:
            instruction = self.fetch()
            decoded = self.decode(instruction)
            self.execute(decoded)
            self.cycles += 1
            self.print_state()
            input("Press Enter to execute the next instruction...")

    def run_timed(self, interval):
        while self.PC < len(self.instructions) * 4:
            instruction = self.fetch()
            decoded = self.decode(instruction)
            self.execute(decoded)
            self.cycles += 1
            self.print_state()
            time.sleep(interval)

    def run_to_completion(self):
        while self.PC < len(self.instructions) * 4:
            instruction = self.fetch()
            decoded = self.decode(instruction)
            self.execute(decoded)
            self.cycles += 1
        self.print_state()

    def print_state(self):
        print(f"PC: {self.PC}")
        print(f"Cycles: {self.cycles}")
        print(f"Registers: {self.registers}")
        print(f"Memory (result area): {self.memory[200:299]}")  # Mostrar la zona de memoria donde se almacenan los resultados

    def print_statistics(self):
        total_instructions = len(self.instructions)
        cpi = self.cycles / total_instructions
        ipc = total_instructions / self.cycles
        print(f"CPI: {cpi}")
        print(f"IPC: {ipc}")
        print(f"Total Cycles: {self.cycles}")

if __name__ == "__main__":
    memory_A, memory_B = create_matrices()

    # Instrucciones binarias para multiplicar matrices de ejemplo
    instructions = [
    # Inicializar x1 con 100
    '00000110010000001000000010010011',  # addi x1, x0, 100
    # Dato matrix C[0][0]
    # Load matrix A into registers
    '00000000000000000010000110000011', # lw x3, 0(x0)  ; Load A[0][0]
    '00000000000100000010001000000011', # lw x4, 1(x0)  ; Load A[0][1]
    '00000000001000000010001010000011', # lw x5, 2(x0) ; Load A[0][2]
    '00000000001100000010001100000011', # lw x6, 3(x0) ; Load A[0][3]
    '00000000010000000010001110000011', # lw x7, 4(x0) ; Load A[0][4]
    '00000000010100000010010000000011', # lw x8, 5(x0) ; Load A[0][5]
    '00000000011000000010010010000011', # lw x9, 6(x0) ; Load A[0][6]
    '00000000011100000010010100000011', # lw x10, 7(x0) ; Load A[0][7]
    '00000000100000000010010110000011', # lw x11, 8(x0) ; Load A[0][8]
    '00000000100100000010011000000011', # lw x12, 9(x0) ; Load A[0][9]
    
    # Load matrix B into registers
    '00000000000000001010011010000011',  # lw x13, 0(x1)  ; Load B[0][0]
    '00000000101000001010011100000011',  # lw x14, 10(x1)  ; Load B[1][0]
    '00000001010000001010011110000011',  # lw x15, 20(x1)  ; Load B[2][0]
    '00000001111000001010100000000011',  # lw x16, 30(x1)  ; Load B[3][0]
    '00000010100000001010100010000011',  # lw x17, 40(x1)  ; Load B[4][0]
    '00000011001000001010100100000011',  # lw x18, 50(x1)  ; Load B[5][0]
    '00000011110000001010100110000011',  # lw x19, 60(x1)  ; Load B[6][0]
    '00000100011000001010101000000011',  # lw x20, 70(x1)  ; Load B[7][0]
    '00000101000000001010101010000011',  # lw x21, 80(x1)  ; Load B[8][0]
    '00000101101000001010101100000011',  # lw x22, 90(x1)  ; Load B[9][0]
    
    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][0]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][0]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010000000100011',  # sw x25, 0(x2)  ; Store x7 in memory[200]
    
    # Dato matrix C[0][1]
    # Load matrix B into registers (for B[0][1] to B[9][1])
    '00000000000100001010011010000011',  # lw x13, 1(x1)  ; Load B[0][1]
    '00000000101100001010011100000011',  # lw x14, 11(x1)  ; Load B[1][1]
    '00000001010100001010011110000011',  # lw x15, 21(x1)  ; Load B[2][1]
    '00000001111100001010100000000011',  # lw x16, 31(x1)  ; Load B[3][1]
    '00000010100100001010100010000011',  # lw x17, 41(x1)  ; Load B[4][1]
    '00000011001100001010100100000011',  # lw x18, 51(x1)  ; Load B[5][1]
    '00000011110100001010100110000011',  # lw x19, 61(x1)  ; Load B[6][1]
    '00000100011100001010101000000011',  # lw x20, 71(x1)  ; Load B[7][1]
    '00000101000100001010101010000011',  # lw x21, 81(x1)  ; Load B[8][1]
    '00000101101100001010101100000011',  # lw x22, 91(x1)  ; Load B[9][1]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][1]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][1]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010000010100011',  # sw x25, 1(x2)  ; Store x25 in memory[204]

    # Dato matrix C[0][2]
    # Load matrix B into registers (for B[0][2] to B[9][2])
    '00000000001000001010011010000011',  # lw x13, 2(x1)  ; Load B[0][2]
    '00000000110000001010011100000011',  # lw x14, 12(x1)  ; Load B[1][2]
    '00000001011000001010011110000011',  # lw x15, 22(x1)  ; Load B[2][2]
    '00000010000000001010100000000011',  # lw x16, 32(x1)  ; Load B[3][2]
    '00000010101000001010100010000011',  # lw x17, 42(x1)  ; Load B[4][2]
    '00000011010000001010100100000011',  # lw x18, 52(x1)  ; Load B[5][2]
    '00000011111000001010100110000011',  # lw x19, 62(x1)  ; Load B[6][2]
    '00000100100000001010101000000011',  # lw x20, 72(x1)  ; Load B[7][2]
    '00000101001000001010101010000011',  # lw x21, 82(x1)  ; Load B[8][2]
    '00000101110000001010101100000011',  # lw x22, 92(x1)  ; Load B[9][2]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][2]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][2]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][2]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][2]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][2]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][2]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][2]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][2]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][2]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][2]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010000100100011',  # sw x25, 2(x2)  ; Store x25 in memory[208]

    # Dato matrix C[0][3]
    # Load matrix B into registers (for B[0][3] to B[9][3])
    '00000000001100001010011010000011',  # lw x13, 3(x1)  ; Load B[0][3]
    '00000000110100001010011100000011',  # lw x14, 13(x1)  ; Load B[1][3]
    '00000001011100001010011110000011',  # lw x15, 23(x1)  ; Load B[2][3]
    '00000010000100001010100000000011',  # lw x16, 33(x1)  ; Load B[3][3]
    '00000010101100001010100010000011',  # lw x17, 43(x1)  ; Load B[4][3]
    '00000011010100001010100100000011',  # lw x18, 53(x1)  ; Load B[5][3]
    '00000011111100001010100110000011',  # lw x19, 63(x1)  ; Load B[6][3]
    '00000100100100001010101000000011',  # lw x20, 73(x1)  ; Load B[7][3]
    '00000101001100001010101010000011',  # lw x21, 83(x1)  ; Load B[8][3]
    '00000101110100001010101100000011',  # lw x22, 93(x1)  ; Load B[9][3]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][3]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][3]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][3]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][3]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][3]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][3]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][3]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][3]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][3]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][3]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010000110100011',  # sw x25, 3(x2)  ; Store x25 in memory[212]

    # Dato matrix C[0][4]
    # Load matrix B into registers (for B[0][4] to B[9][4])
    '00000000010000001010011010000011',  # lw x13, 4(x1)  ; Load B[0][4]
    '00000000111000001010011100000011',  # lw x14, 14(x1)  ; Load B[1][4]
    '00000001100000001010011110000011',  # lw x15, 24(x1)  ; Load B[2][4]
    '00000010001000001010100000000011',  # lw x16, 34(x1)  ; Load B[3][4]
    '00000010110000001010100010000011',  # lw x17, 44(x1)  ; Load B[4][4]
    '00000011011000001010100100000011',  # lw x18, 54(x1)  ; Load B[5][4]
    '00000100000000001010100110000011',  # lw x19, 64(x1)  ; Load B[6][4]
    '00000100101000001010101000000011',  # lw x20, 74(x1)  ; Load B[7][4]
    '00000101010000001010101010000011',  # lw x21, 84(x1)  ; Load B[8][4]
    '00000101111000001010101100000011',  # lw x22, 94(x1)  ; Load B[9][4]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][4]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][4]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][4]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][4]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][4]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][4]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][4]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][4]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][4]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][4]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010001000100011',  # sw x25, 4(x2)  ; Store x25 in memory[216]

    # Dato matrix C[0][5]
    # Load matrix B into registers (for B[0][5] to B[9][5])
    '00000000010100001010011010000011',  # lw x13, 5(x1)  ; Load B[0][5]
    '00000000111100001010011100000011',  # lw x14, 15(x1)  ; Load B[1][5]
    '00000001100100001010011110000011',  # lw x15, 25(x1)  ; Load B[2][5]
    '00000010001100001010100000000011',  # lw x16, 35(x1)  ; Load B[3][5]
    '00000010110100001010100010000011',  # lw x17, 45(x1)  ; Load B[4][5]
    '00000011011100001010100100000011',  # lw x18, 55(x1)  ; Load B[5][5]
    '00000100000100001010100110000011',  # lw x19, 65(x1)  ; Load B[6][5]
    '00000100101100001010101000000011',  # lw x20, 75(x1)  ; Load B[7][5]
    '00000101010100001010101010000011',  # lw x21, 85(x1)  ; Load B[8][5]
    '00000101111100001010101100000011',  # lw x22, 95(x1)  ; Load B[9][5]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][5]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][5]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][5]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][5]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][5]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][5]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][5]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][5]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][5]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][5]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010001010100011',  # sw x25, 5(x2)  ; Store x25 in memory[220]
   
   # Dato matrix C[0][6]
    # Load matrix B into registers (for B[0][6] to B[9][6])
    '00000000011000001010011010000011',  # lw x13, 6(x1)  ; Load B[0][6]
    '00000001000000001010011100000011',  # lw x14, 16(x1)  ; Load B[1][6]
    '00000001101000001010011110000011',  # lw x15, 26(x1)  ; Load B[2][6]
    '00000010010000001010100000000011',  # lw x16, 36(x1)  ; Load B[3][6]
    '00000010111000001010100010000011',  # lw x17, 46(x1)  ; Load B[4][6]
    '00000011100000001010100100000011',  # lw x18, 56(x1)  ; Load B[5][6]
    '00000100001000001010100110000011',  # lw x19, 66(x1)  ; Load B[6][6]
    '00000100110000001010101000000011',  # lw x20, 76(x1)  ; Load B[7][6]
    '00000101011000001010101010000011',  # lw x21, 86(x1)  ; Load B[8][6]
    '00000110000000001010101100000011',  # lw x22, 96(x1)  ; Load B[9][6]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][6]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][6]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][6]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][6]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][6]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][6]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][6]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][6]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][6]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][6]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010001100100011',  # sw x25, 6(x2)  ; Store x25 in memory[224]

    # Dato matrix C[0][7]
    # Load matrix B into registers (for B[0][7] to B[9][7])
    '00000000011100001010011010000011',  # lw x13, 7(x1)  ; Load B[0][7]
    '00000001000100001010011100000011',  # lw x14, 17(x1)  ; Load B[1][7]
    '00000001101100001010011110000011',  # lw x15, 27(x1)  ; Load B[2][7]
    '00000010010100001010100000000011',  # lw x16, 37(x1)  ; Load B[3][7]
    '00000010111100001010100010000011',  # lw x17, 47(x1)  ; Load B[4][7]
    '00000011100100001010100100000011',  # lw x18, 57(x1)  ; Load B[5][7]
    '00000100001100001010100110000011',  # lw x19, 67(x1)  ; Load B[6][7]
    '00000100110100001010101000000011',  # lw x20, 77(x1)  ; Load B[7][7]
    '00000101011100001010101010000011',  # lw x21, 87(x1)  ; Load B[8][7]
    '00000110000100001010101100000011',  # lw x22, 97(x1)  ; Load B[9][7]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][7]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][7]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][7]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][7]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][7]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][7]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][7]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][7]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][7]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][7]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010001110100011',  # sw x25, 7(x2)  ; Store x25 in memory[228]

    # Dato matrix C[0][8]
    # Load matrix B into registers (for B[0][8] to B[9][8])
    '00000000100000001010011010000011',  # lw x13, 8(x1)  ; Load B[0][8]
    '00000001001000001010011100000011',  # lw x14, 18(x1)  ; Load B[1][8]
    '00000001110000001010011110000011',  # lw x15, 28(x1)  ; Load B[2][8]
    '00000010011000001010100000000011',  # lw x16, 38(x1)  ; Load B[3][8]
    '00000011000000001010100010000011',  # lw x17, 48(x1)  ; Load B[4][8]
    '00000011101000001010100100000011',  # lw x18, 58(x1)  ; Load B[5][8]
    '00000100010000001010100110000011',  # lw x19, 68(x1)  ; Load B[6][8]
    '00000100111000001010101000000011',  # lw x20, 78(x1)  ; Load B[7][8]
    '00000101100000001010101010000011',  # lw x21, 88(x1)  ; Load B[8][8]
    '00000110001000001010101100000011',  # lw x22, 98(x1)  ; Load B[9][8]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][8]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][8]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][8]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][8]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][8]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][8]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][8]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][8]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][8]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][8]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010010000100011',  # sw x25, 8(x2)  ; Store x25 in memory[232]

    # Dato matrix C[0][9]
    # Load matrix B into registers (for B[0][9] to B[9][9])
    '00000000100100001010011010000011',  # lw x13, 9(x1)  ; Load B[0][9]
    '00000001001100001010011100000011',  # lw x14, 19(x1)  ; Load B[1][9]
    '00000001110100001010011110000011',  # lw x15, 29(x1)  ; Load B[2][9]
    '00000010011100001010100000000011',  # lw x16, 39(x1)  ; Load B[3][9]
    '00000011000100001010100010000011',  # lw x17, 49(x1)  ; Load B[4][9]
    '00000011101100001010100100000011',  # lw x18, 59(x1)  ; Load B[5][9]
    '00000100010100001010100110000011',  # lw x19, 69(x1)  ; Load B[6][9]
    '00000100111100001010101000000011',  # lw x20, 79(x1)  ; Load B[7][9]
    '00000101100100001010101010000011',  # lw x21, 89(x1)  ; Load B[8][9]
    '00000110001100001010101100000011',  # lw x22, 99(x1)  ; Load B[9][9]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[0][0] * B[0][9]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[0][1] * B[1][9]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[0][2] * B[2][9]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[0][3] * B[3][9]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[0][4] * B[4][9]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[0][5] * B[5][9]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[0][6] * B[6][9]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[0][7] * B[7][9]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[0][8] * B[8][9]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[0][9] * B[9][9]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010010010100011',  # sw x25, 9(x2)  ; Store x25 in memory[236]

    # Dato matrix C[1][0]
    # Load matrix A into registers
    '00000001010000000010000110000011',  # lw x3, 10(x0)  ; Load A[1][0]
    '00000001010100000010001000000011',  # lw x4, 11(x0)  ; Load A[1][1]
    '00000001011000000010001010000011',  # lw x5, 12(x0)  ; Load A[1][2]
    '00000001011100000010001100000011',  # lw x6, 13(x0)  ; Load A[1][3]
    '00000001100000000010001110000011',  # lw x7, 14(x0)  ; Load A[1][4]
    '00000001100100000010010000000011',  # lw x8, 15(x0)  ; Load A[1][5]
    '00000001101000000010010010000011',  # lw x9, 16(x0)  ; Load A[1][6]
    '00000001101100000010010100000011',  # lw x10, 17(x0) ; Load A[1][7]
    '00000001110000000010010110000011',  # lw x11, 18(x0) ; Load A[1][8]
    '00000001110100000010011000000011',  # lw x12, 19(x0) ; Load A[1][9]

    # Load matrix B into registers (for B[0][0] to B[9][0])
    '00000000000000001010011010000011',  # lw x13, 0(x1)  ; Load B[0][0]
    '00000000101000001010011100000011',  # lw x14, 10(x1)  ; Load B[1][0]
    '00000001010000001010011110000011',  # lw x15, 20(x1)  ; Load B[2][0]
    '00000001111000001010100000000011',  # lw x16, 30(x1)  ; Load B[3][0]
    '00000010100000001010100010000011',  # lw x17, 40(x1)  ; Load B[4][0]
    '00000011001000001010100100000011',  # lw x18, 50(x1)  ; Load B[5][0]
    '00000011110000001010100110000011',  # lw x19, 60(x1)  ; Load B[6][0]
    '00000100011000001010101000000011',  # lw x20, 70(x1)  ; Load B[7][0]
    '00000101000000001010101010000011',  # lw x21, 80(x1)  ; Load B[8][0]
    '00000101101000001010101100000011',  # lw x22, 90(x1)  ; Load B[9][0]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[1][0] * B[0][0]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[1][1] * B[1][0]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[1][2] * B[2][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[1][3] * B[3][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[1][4] * B[4][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[1][5] * B[5][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[1][6] * B[6][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[1][7] * B[7][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[1][8] * B[8][0]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[1][9] * B[9][0]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010010100100011',  # sw x25, 10(x2)  ; Store x25 in memory[240]

    # Dato matrix C[1][1]
    # Load matrix B into registers (for B[0][1] to B[9][1])
    '00000000000100001010011010000011',  # lw x13, 1(x1)  ; Load B[0][1]
    '00000000101100001010011100000011',  # lw x14, 11(x1)  ; Load B[1][1]
    '00000001010100001010011110000011',  # lw x15, 21(x1)  ; Load B[2][1]
    '00000001111100001010100000000011',  # lw x16, 31(x1)  ; Load B[3][1]
    '00000010100100001010100010000011',  # lw x17, 41(x1)  ; Load B[4][1]
    '00000011001100001010100100000011',  # lw x18, 51(x1)  ; Load B[5][1]
    '00000011110100001010100110000011',  # lw x19, 61(x1)  ; Load B[6][1]
    '00000100011100001010101000000011',  # lw x20, 71(x1)  ; Load B[7][1]
    '00000101000100001010101010000011',  # lw x21, 81(x1)  ; Load B[8][1]
    '00000101101100001010101100000011',  # lw x22, 91(x1)  ; Load B[9][1]

    '00000000110100011000101110110011',  # mul x23, x3, x13 ; x23 = A[1][0] * B[0][1]
    '00000000111000100000110000110011',  # mul x24, x4, x14 ; x24 = A[1][1] * B[1][1]
    '00000011100010111000110010110011',  # add x25, x23, x24 ; 
    '00000000111100101000101110110011',  # mul x23, x5, x15 ; x23 = A[1][2] * B[2][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001000000110000101110110011',  # mul x23, x6, x16 ; x23 = A[1][3] * B[3][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001000100111000101110110011',  # mul x23, x7, x17 ; x23 = A[1][4] * B[4][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001001001000000101110110011',  # mul x23, x8, x18 ; x23 = A[1][5] * B[5][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001001101001000101110110011',  # mul x23, x9, x19 ; x23 = A[1][6] * B[6][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001010001010000101110110011',  # mul x23, x10, x20 ; x23 = A[1][7] * B[7][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001010101011000101110110011',  # mul x23, x11, x21 ; x23 = A[1][8] * B[8][1]
    '00000011011111001000110100110011',  # add x26, x25, x23 ;
    '00000001011001100000101110110011',  # mul x23, x12, x22 ; x23 = A[1][9] * B[9][1]
    '00000011011111010000110010110011',  # add x25, x26, x23 ;
    '00000001100100010010010110100011',  # sw x25, 11(x2)  ; Store x25 in memory[244]

    '00000000000000000000000000001111'   # End program
    ]

    processor = UnicicloProcessor(instructions, memory_A, memory_B)

    # Escoger modalidad de ejecución
    mode = input("Seleccione el modo de ejecución: 1. Step by step, 2. Timed, 3. Complete\n")
    if mode == '1':
        processor.run_step_by_step()
    elif mode == '2':
        interval = float(input("Ingrese el intervalo de tiempo entre ciclos (en segundos): "))
        processor.run_timed(interval)
    elif mode == '3':
        processor.run_to_completion()

    processor.print_statistics()
